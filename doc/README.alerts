Custom Alert Endpoint
---------------------

Alert endpoints are lua script executed whenever an alert event occurs. An example
of alert endpoint is the email export endpoint, which sends email with alert information.

Users can define a custom alert endpoint to be called on alert events. The endpoint
could trigger, for example, an external bash script with custom logic.

The custom alert endpoint can be enabled as follows:

  1. Run `cp /usr/share/ntopng/scripts/lua/modules/alert_endpoints/{sample.lua,custom.lua}`
  2. Enable "Alerts to Third-Party Endpoints" from the "Alert Endpoints" settings
  3. Run `redis-cli set ntopng.prefs.alerts.custom_notifications_enabled 1`
  4. Restart ntopng

The file `/usr/share/ntopng/scripts/lua/modules/alert_endpoints/custom.lua` can then be
modified with custom logic.

Threshold Cross Alerts
----------------------

If the alert is a threshold_cross alert on an a new metric, the process is pretty simple.
For example, in order to get an alert when the total youtube traffic crosses a specified threshold:

- Extend `alert_consts.alert_functions_info`, `alert_consts.alarmable_metrics` end
  `alert_consts.alert_functions_description` by adding a new metric `youtube`.
- In `alert_utils.lua`, create the following function:
  ```
  function youtube(old, new, interval)
    return proto_bytes(old, new, "Youtube")
  end
  ```

The new metric should be now available into the ntopng gui, where it will be possible
to set the threshold on an host/network/interface and select to be checked every
minute/5 minutes/hour/day.

External Programs
-----------------

It is possible to easily generate *stored alerts* from external programs, integrating
them with the ntopng alerts framework.
This can be accomplished by putting a valid JSON into the redis queue
`ntopng.alert_process_queue`. Here is an example of how to do this from a bash
script:

```
redis-cli "RPUSH" "ntopng.alert_process_queue" "{ \"ifid\": 0, \"entity_type\": 5, \"entity_value\": \"4a:00:06:a0:7c:51\", \"type\": 17, \"severity\": 1, \"message\": \"IP 1.2.3.4 changed association from <a href=\\\"\\/lua\\/mac_details.lua?host=4a:00:06:a0:7c:50\\\">4a:00:06:a0:7c:50<\\/a> to <a href=\\\"\\/lua\\/mac_details.lua?host=4a:00:06:a0:7c:51\\\">4a:00:06:a0:7c:51<\\/a>\", \"tstamp\": 1523616620, \"action\": \"store\" }"
```

and here is the formatted JSON:

```
{
   "ifid":  0,
   "entity_type":  5,
   "entity_value":  "4A:00:06:A0:7C:51",
   "type":  17,
   "severity":  1,
   "message":  "IP 1.2.3.4 changed association from <a href="/lua/mac_details.lua?host=4a:00:06:a0:7c:50">4a:00:06:a0:7c:50</a> to <a href="/lua/mac_details.lua?host=4a:00:06:a0:7c:51">4a:00:06:a0:7c:51</a>",
   "tstamp":  1523616620,
   "action":  "store"
}
```

The format of the JSON message is very similar to the format described above. Here numeric
fields are used in place of the string representation, see `alert_consts` for mappings
between string and numeric representation.
